----------------------------------------------------------------------------
-- Common Lander: Executor
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

cl_import(this, {
   cl_types = {"is_callable"},
   cl_data = {"Data"},
   cl_extend = {"Extend"},
   cl_ord_set = {"OrdSet"},
   cl_table = {"table_to_string"},
   cl_string = {"indent"},
   cl_function = {"const"},
})

Executor, ExecutorMeta = Data(function(...)
   local lst = {...}

   for i=1,#lst do
      local f = lst[i]
      if not is_callable(f) then
         assert(
            nil,
            string.format(
               "Executor member is not a callable value:\nMember: %s\nContext: %s",
               f, table_to_string(lst)
            )
         )
      end
   end

   return { _set = OrdSet.new(unpack(lst)) }
end)

function ExecutorMeta:__index(k)
   return Executor[k] or self._set[k]
end

ExecutorMeta.__newindex = const()

function ExecutorMeta.__concat(mt, ind, name)
   return function(a, b)
      if not getmetatable(b) == mt then
         assert(
            nil,
            string.format("Not a %s: %s", name, b)
         )
      end
      return ind.new(unpack((a._set .. b._set):unwrap()))
   end
end

function executor_to_string(name)
   return function(this)
      local out = name .. "["
      for i=1,this._set:len() do
         out = out .. indent("\n" .. tostring(this._set[i]) .. ",")
      end
      out = out .. "\n]"
      return out
   end
end

Serial, SerialMeta = Extend(Executor, ExecutorMeta)

SerialMeta.__tostring = executor_to_string("Serial")

function is_serial(t)
   return getmetatable(t) == SerialMeta
end

function SerialMeta:__call(...)
   local acc = {...}
   for i=1,self._set:len() do
      local f = self._set[i]
      acc = {f(unpack(acc))}
   end
   return unpack(acc)
end

Parallel, ParallelMeta = Extend(Executor, ExecutorMeta)

ParallelMeta.__tostring = executor_to_string("Parallel")

function is_parallel(t)
   return getmetatable(t) == ParallelMeta
end

function ParallelMeta:__call(...)
   local acc = {...}
   for i=1,self._set:len() do
      local f = self._set[i]
      acc = {f(unpack(acc))}
   end
   return unpack(acc)
end
