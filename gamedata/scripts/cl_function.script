----------------------------------------------------------------------------
-- Common Lander: Functions
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

cl_import(this, {
   cl_list = {
      "fold",
      "reverse"
   }
})

-- Implementation

--- Returns whatever was passed to it
---@param ... any
---@return any
function id(...)
   return ...
end

--- Returns a function that returns the given parameters unconditionally
function const(...)
   local args = {...}
   return function()
      return unpack(args)
   end
end

--- Produce a function that threads an input through the given functions
---@param ... fun(any: any): any
---@return fun(any: any): any
function compose(...)
   local fs = {...}

   return fold(
      fs, id,
      function(acc, f)
         return function(p)
            return f(acc(p))
         end
      end
   )
end

--- Use function B to modify the input of function A
function advise_before(a, b)
   return function(...)
      return a(b(...))
   end
end

--- Use function B to modify the output of function A
function advise_after(a, b)
   return function(...)
      return b(a(...))
   end
end

--- Reverse the order of the given function's arguments
---@param f fun(...: any): any
---@return fun(...: any): any
function flip(f)
   return function(...)
      return f(unpack(reverse({...})))
   end
end

--- Provide a function's first argument without calling it
---@param f fun(p: any, ...: any): any
---@param p any
---@return fun(...: any): any
function curry(f, p)
   return function(...)
      return f(p, ...)
   end
end

--- Provide a function's last argument without calling it
---@param f fun(p: any, ...: any): any
---@param p any
---@return fun(...: any): any
function curry_r(f, p)
   return function(...)
      return f(..., p)
   end
end

--- Wrap the given function F in pcall,
--- delegating to function E in case of an error.
---@param e fun(...: string): any
---@param f fun(...: any): any
---@return fun(...: any): any
function protected(e, f)
   return function(...)
      local res, out = pcall(f, ...)
      if not res then
         return e(out)
      end
      return out
   end
end

-- Curried == operator
function eq(a)
   return function(b)
      return a == b
   end
end
