----------------------------------------------------------------------------
-- Common Lander: Logging
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- List
local map_list = cl_list.map

--- Table
local fold_table = cl_table.fold

-- Constants

OFF = 0
ERROR = 1
WARNING = 2
INFO = 3
DEBUG = 4
TRACE = 5

local LEVEL = WARNING

-- Implementation

---@class logger
---@field mod string
---@field level number
---@field log_impl fun(self: logger, s: string, ...: any): nil

--- Logger Metatable
Logger = {}

--- Logger constructor
function logger(mod, level)
   assert(
      type(mod) == "string",
      string.format("Invalid module name: %s", mod)
   )
   assert(
      type(level) == "number",
      string.format("Invalid log level: %s", level)
   )
   return setmetatable(
      { mod = mod, level = level },
      {
         __index = Logger,
         __call = function(self, ...)
            if LEVEL >= self.level then
               return self:log_impl(...)
            end
         end
      }
   )
end

function val_to_string(t)
   if type(t) == "table" then
      return fold_table(
         t,
         "{",
         function(acc, k, v)
            return acc .. string.gsub(
               string.format("\n%s: %s", k, val_to_string(v)),
               "\n",
               "\n   "
            )
         end
      ) .. "\n}"
   elseif type(t) == "userdata" then
      if t.i and t.j and t.k and t.c then
         return "[" .. string.format(
            "\n%s\n%s\n%s\n%s",
            val_to_string(t.i),
            val_to_string(t.j),
            val_to_string(t.k),
            val_to_string(t.c)
         ):gsub("\n", "\n   ") .. "\n]"
      elseif t.x and t.y and t.z then
         return string.format("[\n   %s,\n   %s, \n   %s  \n]", t.x, t.y, t.z)
      elseif t.x and t.y then
         return string.format("[%s, %s]", t.x, t.y)
      else
         return string.format("userdata")
      end
   else
      return string.format("%s", t)
   end
end

function Logger:log_impl(s, ...)
   printf("%s: " .. s, self.mod, unpack(map_list({...}, val_to_string)))
end

--- If logging is enabled, print the given format string and arguments
---@param level number
---@return fun(self: logger, s: string, ...: any): nil
function make_log(level)
   return function(self, s, ...)
      if LEVEL >= level then
         return self:log_impl(s, ...)
      end
   end
end

Logger.error = make_log(ERROR)
Logger.warning = make_log(WARNING)
Logger.debug = make_log(DEBUG)
Logger.info = make_log(INFO)
Logger.trace = make_log(TRACE)

function Logger:unconditionally(f, ...)
   local self_level = self.level
   self.level = TRACE
   local out = f(...)
   self.level = self_level
   return out
end
