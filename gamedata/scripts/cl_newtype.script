----------------------------------------------------------------------------
-- Common Lander: Newtypes
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

cl_import(this, {
   cl_data = {"Data"},
   cl_function = {"const"},
   cl_monkey = {"monkey_continue"},
})

--- Given a constructor function, return an opaque wrapper type
--- and its metatable
---@param new fun(...: any): any
---@param pass boolean?
---@return table, metatable
function Newtype(new, pass)
   local ty, mt = Data(function(...)
         return {_inner = new(...)}
   end)

   if pass then
      -- If this is a passthrough newtype,
      -- fallback to its inner value on index failure
      mt.__index = monkey_continue(
         mt.__index,
         function(cc, t, k)
            return cc(t, k) or t._inner[k]
         end
      )

      -- And allow writes to the inner value
      mt.__newindex = function(t, k, v)
         t._inner[k] = v
      end
   else
      -- Otherwise, disallow writes
      mt.__newindex = const()
   end

   return ty, mt
end
