----------------------------------------------------------------------------
-- Common Lander: Ordered Set
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

cl_import(this, {
   cl_list = {
      "unique",
      "count",
      "list_to_string",
      "concat",
   },
   cl_named = {"Named"},
   cl_string = {"indent"},
   cl_newtype = {"Newtype"},
   cl_monkey = {"monkey_continue"}
})

OrdSet, OrdSetMeta = Newtype(function(...)
   local lst = {...}
   if not unique(lst) then
      assert(
         nil,
         string.format(
            "An ordered set may not contain duplicate members:\n%s",
            list_to_string(lst)
         )
      )
   end
   return lst
end)

is_ord_set = Named.as(
   "ord_set",
   function(t)
      return getmetatable(t) == OrdSetMeta
   end
)

function OrdSet:push_front(t)
   if count(self._inner, function(u) return u == t end) > 0 then
      assert(
         nil,
         string.format(
            "OrdSet may not contain duplicates:\nSrc: %s\nDst: %s",
            t, self
         )
      )
   end

   return table.insert(self._inner, 1, t)
end

function OrdSet:push_back(t)
   if count(self._inner, function(u) return u == t end) > 0 then
      assert(nil, "OrdSet may not contain duplicates.")
   end

   return table.insert(self._inner, t)
end

function OrdSet:insert(i, t)
   if count(self._inner, function(u) return u == t end) > 0 then
      assert(nil, "OrdSet may not contain duplicates.")
   end

   return table.insert(self._inner, i, t)
end

function OrdSet:remove(i)
   return table.remove(self._inner, i)
end

function OrdSet:unwrap()
   return self._inner
end

function OrdSet:len()
   return #self._inner
end

OrdSetMeta.__index = monkey_continue(
   OrdSetMeta.__index,
   function(cc, this, k)
      if type(k) == "number" then
         return this._inner[k]
      end
      return cc(this, k)
   end
)

function OrdSetMeta:__newindex(k, v)
   if type(k) ~= "number" then
      return
   end

   if count(self._inner, function(u) return u == v end) > 0 then
      assert(nil, "OrdSet may not contain duplicates.")
   end

   self._inner[k] = v
end

function OrdSetMeta:__tostring()
   local out = "OrdSet["
   for i=1,#self._inner do
      out = out .. indent("\n" .. tostring(self._inner[i]) .. ",")
   end
   out = out .. "\n]"
   return out
end

function OrdSetMeta.__concat(a, b)
   if not is_ord_set(b) then
      assert(
         nil,
         string.format("Invalid concatenation:\nLHS: %s\nRHS: %s", a, b)
      )
   end

   return OrdSet.new(unpack(concat(a:unwrap(), b:unwrap())))
end
