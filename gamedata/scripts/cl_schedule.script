----------------------------------------------------------------------------
-- Common Lander: Schedule
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

cl_import(this, {
   cl_function = {
      "id",
      "eq",
      "compose",
   },
   cl_list = {
      "list_to_string",
      "foldl",
      "foldl_and",
      "foldr",
      "index_of",
      "count",
      "unique",
      {map = "map_list"},
      {concat = "concat_list"},
   },
   cl_table = {"table_to_string"},
   cl_string = {"indent"},
   cl_option = {"None"},
   cl_named = {"Named"},
   cl_system = {
      "System",
      "is_system"
   },
   cl_error = {"handle_error"},
   cl_types = {"is_callable",},
   cl_executor = {
      "Serial",
      "Parallel",
      "is_serial",
   }
})

--- Schedule index
Schedule = {}

--- Schedule metatable
ScheduleMeta = { __index = Schedule }

function Schedule.new()
   return setmetatable(
      { _ser = Serial.new() },
      ScheduleMeta
   )
end

function is_schedule(t)
   return getmetatable(t) == ScheduleMeta
end

function Schedule:concat(a)
   --[[
   printf(
      "Schedule.concat:\nLHS: %s\nRHS: %s",
      self, a
   )
   --]]

   if is_system(a) then
      a = Serial.new(a)
   elseif not is_serial(a) then
      assert(
         nil,
         string.format("Value is not a Serial: %s", a)
      )
   end

   -- If this is an empty schedule, emplace the values directly
   if #self._ser._set._lst == 0 then
      for i=1,#a._set._lst do
         local itm = a._set._lst[i]
         local par = Parallel.new(itm)
         table.insert(self._ser._set._lst, par)
      end

      --printf("Out: %s", self)

      return self
   end

   -- Find indices of pre-existing entries to use as anchor points
   local inds = {}
   for i=1,#a._set._lst do
      local itm = a._set._lst[i]
      inds[i] = -1
      for j=1,#self._ser._set._lst do
         local par = self._ser._set._lst[j]
         local ind = index_of(
            par._set._lst,
            function(cand)
               return cand == itm
            end
         )
         if ind then
            inds[i] = j
         end
      end
   end

   --printf("inds: %s", list_to_string(inds))

   -- Error out if there are no points of reference
   local anchored = count(
      inds,
      eq(-1)
   ) < #inds
   if not anchored then
      assert(
         nil,
         string.format(
            "No common members in concatenation:\nSrc: %s\nDst: %s",
            a,
            self
         )
      )
   end

   -- Error out if the source and destination disagree on ordering
   local sorted = foldl_and(
      inds,
      function(a, b)
         if a == -1 or b == -1 then
            return true
         end
      return a < b
   end)

   if not sorted then
      assert(
         nil,
         string.format(
            "Concatenation operands disagree on ordering:\nSrc: %s\nDst: %s",
            a,
            self
         )
      )
   end

   -- If duplicate indices exist, split them into separate parallels
   --printf("splitting")
   local prev = nil
   local acc = 0
   for i=1,#inds do
      local ind = inds[i]
      --[[
      printf("prev: %s", prev)
      printf("ind: %s", ind)
      printf("entry: %s", a._set._lst[i])
      --]]

      if ind == -1 then
         goto next_ind
      end

      if not prev then
         prev = ind
      elseif ind == prev then
         --printf("list: %s", unpack(self._ser._set._lst[ind]._set._lst))
         local target = index_of(
            self._ser._set._lst[ind]._set._lst,
            function(cand)
               return cand == a._set._lst[i]
            end
         )
         --printf("target: %s", target)
         local res = table.remove(
            self._ser._set._lst[ind]._set._lst,
            target
         )
         table.insert(self._ser._set._lst, ind + 1, Parallel.new(res))
         acc = acc + 1
      end

      inds[i] = inds[i] + acc

      ::next_ind::
   end

   --printf("inds split: %s", table_to_string(inds))
   --printf("split: %s", self)

   --printf("allocating")
   local last = 0
   local gap = 0
   local ofs = 0
   for i=1,#inds do
      local ind = inds[i]
      if ind == -1 then
         gap = gap + 1
      else
         local delta = ind - last
         --printf("gap: %s, delta: %s", gap, delta)
         while gap > delta - 1 do
            table.insert(self._ser._set._lst, ind, Parallel.new())
            gap = gap - 1
            ofs = ofs + 1
         end
         last = ind
         inds[i] = inds[i] + ofs
      end


      ::next_ind::
   end

   --[[
   printf("inds allocated: %s", table_to_string(inds))
   printf("allocated: %s", self)
   --]]

   -- Insert
   --printf("inserting")
   local foo = 1
   local base = nil
   local rem = foldl(
      inds,
      {},
      function(acc, next)
         --[[
         printf("acc: %s", acc)
         printf("next: %s", next)
         --]]
         if next == -1 then
            --printf("unindexed, accumulating")
            table.insert(acc, a._set._lst[foo])
         else
            base = next
            for i=1,#acc do
               --[[
               printf("base index %s", base)
               printf("index %s", i)
               --]]
               local target = base - i
               --printf("target %s", i)
               local itm = table.remove(acc)
               --[[
               printf("inserting %s", itm)
               printf(
                  "to parallel %s",
                  list_to_string(self._ser._set._lst[target]._set._lst)
               )
               --]]
               table.insert(
                  self._ser._set._lst[target]._set._lst,
                  itm
               )
            end
         end
         foo = foo + 1
         return acc
      end
   )

   --print("rem:", unpack(rem))

   for i=1,#rem do
      if not self._ser._set._lst[base + i] then
         --print("allocating new parallel at", base + 1)
         table.insert(self._ser._set._lst, Parallel.new())
      end
      --print("inserting to parallel", base + i)
      table.insert(
         self._ser._set._lst[base + i]._set._lst,
         table.remove(rem, 1)
      )
   end


   --printf("Out: %s", self)

   return self
end

function ScheduleMeta.__concat(a, b)
   return a:concat(b)
end

function ScheduleMeta:__tostring()
   local out = "Schedule["
   out = out .. indent("\n" .. tostring(self._ser))
   out = out .. "\n]"
   return out
end

function ScheduleMeta:__call(...)
   return self._ser(...)
end

on_level_call = Schedule.new()
on_level_call_start = System.new("level_call_start")
on_level_call_finish = System.new("level_call_finish")
on_level_call:concat(on_level_call_start .. on_level_call_finish)

actor_on_update = Schedule.new()
actor_on_update_start = System.new("actor_on_update_start")
actor_on_update_finish = System.new("actor_on_update_finish")
actor_on_update:concat(actor_on_update_start .. actor_on_update_finish)

actor_on_first_update = Schedule.new()
actor_on_first_update_start = System.new("actor_on_first_update_start")
actor_on_first_update_finish = System.new("actor_on_first_update_finish")
actor_on_first_update:concat(
    actor_on_first_update_start .. actor_on_first_update_finish
)

actor_on_weapon_fired = Schedule.new()
actor_on_weapon_fired_start = System.new("actor_on_weapon_fired_start")
actor_on_weapon_fired_finish = System.new("actor_on_weapon_fired_finish")
actor_on_weapon_fired:concat(
   actor_on_weapon_fired_start .. actor_on_weapon_fired_finish
)

on_key_press = Schedule.new()
on_key_press_start = System.new("on_key_press_start")
on_key_press_finish = System.new("on_key_press_finish")
on_key_press:concat(
   on_key_press_start .. on_key_press_finish
)

on_before_mouse_move = Schedule.new()
on_before_mouse_move_start = System.new("on_before_mouse_move_start")
on_before_mouse_move_finish = System.new("on_before_mouse_move_finish")
on_before_mouse_move:concat(
   on_before_mouse_move_start .. on_before_mouse_move_finish
)

state = {}

do_on_level_call = function()
   local res, out = pcall(on_level_call, state)
   if not res then
      RemoveUniqueCall(do_on_level_call)
      handle_error(out, callstack(false, true))
   end
end

do_actor_on_update = function()
   local res, out = pcall(actor_on_update, state)
   if not res then
      UnregisterScriptCallback("actor_on_update", do_actor_on_update)
      handle_error(out, callstack(false, true))
   end
end

do_actor_on_first_update = function()
   local res, out = pcall(actor_on_first_update, state)
   if not res then
      UnregisterScriptCallback(
         "actor_on_first_update",
         do_actor_on_first_update
      )
      handle_error(out, callstack(false, true))
   end
end

do_actor_on_weapon_fired = function()
   local res, out = pcall(actor_on_weapon_fired, state)
   if not res then
      UnregisterScriptCallback(
         "actor_on_weapon_fired",
         do_actor_on_weapon_fired
      )
      handle_error(out, callstack(false, true))
   end
end

do_on_before_mouse_move = function(x, y, disabled, flags)
   state.mouse = {
      x = x,
      y = y,
      disabled = disabled,
      override = false,
   }
   local res, out = pcall(on_before_mouse_move, state)
   if not res then
      UnregisterScriptCallback(
         "on_before_mouse_move",
         do_on_before_mouse_move
      )
      handle_error(out, callstack(false, true))
   end
   flags.ret_value = state.mouse.override
   state.mouse = nil
end

do_on_key_press = function(key)
   state.keyboard = {
      key = key
   }
   local res, out = pcall(on_key_press, state)
   if not res then
      UnregisterScriptCallback(
         "on_key_press",
         do_on_key_press
      )
      handle_error(out, callstack(false, true))
   end
   state.keyboard = nil
end

function on_game_start()
   printf("schedule_new on_game_start")

   printf("on_level_call: %s", on_level_call)
   printf("actor_on_update: %s", actor_on_update)
   printf("actor_on_first_update: %s", actor_on_first_update)
   printf("actor_on_weapon_fired: %s", actor_on_weapon_fired)
   printf("on_before_mouse_move: %s", on_before_mouse_move)
   printf("on_key_press: %s", on_key_press)

   AddUniqueCall(do_on_level_call)
   RegisterScriptCallback("actor_on_update", do_actor_on_update)
   RegisterScriptCallback("actor_on_first_update", do_actor_on_first_update)
   RegisterScriptCallback("actor_on_weapon_fired", do_actor_on_weapon_fired)
   RegisterScriptCallback("on_before_mouse_move", do_on_before_mouse_move)
   RegisterScriptCallback("on_key_press", do_on_key_press)
end
