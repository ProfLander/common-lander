----------------------------------------------------------------------------
-- GoldenOrb: Schedule
----------------------------------------------------------------------------
-- Object-oriented dependent function scheduling.
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

--- List
local fold_list = cl_list.fold
local concat_lists = cl_list.concat

--- Table
local fold_table = cl_table.fold

--- Function
local const = cl_function.const
local protected = cl_function.protected

--- Logging
local log = cl_logging.logger(
   "GoldenOrb/Schedule",
    cl_logging.TRACE
)

-- Constants

--- Input enum
--- Data exists
I_EXIST = 0
--- Data does not exist
I_NOT_EXIST = 1
--- Read data, asserting non-nil
I_READ = 2
--- Read data, allowing nil
I_READ_MAYBE = 3

--- Output enum
--- Write data, nil included
O_WRITE = 0
--- Write data if non-nil
O_WRITE_MAYBE = 1

-- Implementation

--- Schedule metatable
---@class schedule
---@field name string
---@field start fun(any: any): any
---@field finish fun(any: any): any
---@field calls table[]
---@field rules [fun(any: any): any, fun(any: any): any]
---@field schedule (fun(any: any): any)[]
local Schedule = {}

--- Schedule constructor
---@return schedule
function schedule(name)
   local function start(...)
      log("%s: Start", name)
      return ...
   end

   local function finish(...)
      log("%s: Finish", name)
      return ...
   end

   return setmetatable(
      {
         name = name,
         start = start,
         finish = finish,
         calls = {
            {
               name = "start",
               after = {},
               before = {},
               inputs = {},
               outputs = {},
               precondition = const(true),
               body = start
            },
            {
               name = "finish",
               after = {start},
               before = {},
               inputs = {},
               outputs = {},
               precondition = const(true),
               body = finish
            },
         },
         rules = {
            {start, finish}
         },
         schedule = nil,
      },
      { __index = Schedule }
   )
end

---@return nil
function Schedule:invalidate()
   log:trace("Schedule:invalidate()")
   self.schedule = nil
end

---@param name string
---@param inputs number|table<string, number|table>
---@param outputs table<string, any>
---@param precondition fun(...: any): boolean
---@param body fun(...: any): any
---@return schedule
function Schedule:add_call(name, inputs, outputs, precondition, body)
   log:trace("Schedule:add_call(%s)", body)
   if type(body) ~= "function" then
      assert(nil, string.format("Invalid call: %s", body))
   end
   if type(inputs) ~= "number" and type(inputs) ~= "table" then
      assert(nil, string.format("Invalid inputs: %s", inputs))
   end
   if type(outputs) ~= "table" then
      assert(nil, string.format("Invalid outputs: %s", outputs))
   end
   if type(precondition) ~= "function" then
      assert(nil, string.format("Invalid precondition: %s", precondition))
   end
   self:invalidate()
   table.insert(
      self.calls,
      {
         name = name,
         inputs = inputs,
         outputs = outputs,
         precondition = precondition,
         body = body
      }
   )
   return self
end

---@param fa fun(any: any): any
---@param fb fun(any: any): any
---@return schedule
function Schedule:add_rule(fa, fb)
   log:trace("Schedule:add_rule(%s, %s)", fa, fb)
   assert(fa ~= nil, "Invalid rule LHS")
   assert(fb ~= nil, "Invalid rule RHS")
   assert(fa ~= fb, "Cannot constrain a call to run relative to itself")
   self:invalidate()
   table.insert(self.rules, {fa, fb})
   return self
end

--- Return the number of elements for which F returns true
function count(lst, f)
   return fold_list(
      lst,
      0,
      function(acc, next)
         return f(next) and (acc + 1) or acc
      end
   )
end

--- Curried equality check
function eq(a)
   return function(b)
      return a == b
   end
end

--- Curried inequality check
function ne(a)
   return function(b)
      return a ~= b
   end
end

---@class system
---@field sys_name string
---@field sys_after (fun(any: any): any)[]
---@field sys_before (fun(any: any): any)[]
---@field sys_inputs table<string, number|table>
---@field sys_outputs table<string, number|table>
---@field sys_precondition (fun(table): boolean)
---@field sys_body fun(state: table): table
local System = {}

function system(name)
   return setmetatable(
      {
         sys_name = name,
         sys_after = {},
         sys_before = {},
         sys_inputs = {},
         sys_outputs = {},
         sys_precondition = const(true),
         sys_body = nil,
      },
      { __index = System }
   )
end

function System:runs_after(...)
   self.sys_after = concat_lists(self.sys_after, {...})
   return self
end

function System:runs_before(...)
   self.sys_before = concat_lists(self.sys_before, {...})
   return self
end

function System:inputs(inputs)
   if type(inputs) == "table" then
      copy_table(self.sys_inputs, inputs)
   elseif type(inputs) == "number" then
      self.sys_inputs = inputs
   end
   return self
end

function System:outputs(outputs)
   copy_table(self.sys_outputs, outputs)
   return self
end

---@param semantic number
---@return fun(self: system, ...: string|string[]): system
function state_lens(member, semantic)
   return function(self, ...)
      local args = {...}
      log:trace("state_lens(%s, %s)(%s)", member, semantic, args)
      log:trace("%s", self[member])
      for i=1,#args do
         local arg = args[i]
         if type(arg) == "table" then
            local j = 1
            log:trace("folding %s with %s", arg, self[member])
            fold_list(
               arg,
               self[member],
               function(acc, next)
                  log:trace("j: %s", j)
                  log:trace("acc: %s", acc)
                  log:trace("next: %s", next)
                  if j == #arg then
                     if type(acc[next]) ~= "table" then
                        acc[next] = semantic
                     end
                  else
                     if type(acc[next]) ~= "table" then
                        acc[next] = {}
                     end
                  end
                  j = j + 1
                  return acc[next]
               end
            )
         else
            self[member][arg] = semantic
         end
      end

      log:trace("%s", self[member])
      return self
   end
end

System.with = state_lens("sys_inputs", I_EXIST)
System.without = state_lens("sys_inputs", I_NOT_EXIST)
System.reads = state_lens("sys_inputs", I_READ)
System.maybe_reads = state_lens("sys_inputs", I_READ_MAYBE)
System.writes = state_lens("sys_outputs", O_WRITE)
System.maybe_writes = state_lens("sys_outputs", O_WRITE_MAYBE)

function System:when(f)
   self.sys_precondition = f
   return self
end

function System:via(f)
   self.sys_body = f
   return self
end

function System:during(schedule)
   assert(self.sys_body ~= nil, "Systems must have a body")

   schedule:insert(
      self.sys_name,
      self.sys_after,
      self.sys_before,
      self.sys_inputs,
      self.sys_outputs,
      self.sys_precondition,
      self.sys_body
   )

   return self.sys_body
end

---@param name string
---@param after (fun(any: any): any)[]
---@param before (fun(any: any): any)[]
---@param inputs number|table
---@param outputs table
---@param precondition function(state: table): boolean
---@param body fun(any: any): any
function Schedule:insert(
      name,
      after,
      before,
      inputs,
      outputs,
      precondition,
      body
)
   log:trace(
      "Schedule:insert(%s, %s, %s, %s, %s, %s, %s)",
      name,
      after,
      before,
      inputs,
      outputs,
      precondition,
      body
   )

   -- Typecheck inputs
   if type(body) ~= "function" then
      assert(nil, string.format("Invalid body: %s", body))
   end

   after = after or {}
   before = before or {}
   inputs = inputs or {}
   outputs = outputs or {}
   precondition = precondition or const(true)

   assert(
      count(after, eq(body)) == 0,
      "After rules must not mention their associated system"
   )

   assert(
      count(before, eq(body)) == 0,
      "Before rules must not mention their associated system"
   )

   if #after == 0 then
      table.insert(after, self.start)
   end

   if #before == 0 then
      table.insert(before, self.finish)
   end

   self:add_call(name, inputs, outputs, precondition, body)
   for i=1,#after do
      self:add_rule(after[i], body)
   end
   for i=1,#before do
      self:add_rule(body, before[i])
   end
   return self
end

---@return schedule
function Schedule:build()
   log:trace("Schedule:build()")

   self.schedule = {}

   log:trace("  calls: %s", #self.calls)
   log:trace("  rules: %s", #self.rules)

   local called = {}
   local count = 0
   while count < #self.calls do
      log:trace("  count: %s", count)
      for _,sys in ipairs(self.calls) do
         log:trace("  body: %s", sys.body)
         if called[sys.body] then
            log:trace("    already called")
            goto next_call
         end

         for _,rule in ipairs(self.rules) do
            log:trace("    rule: %s -> %s", rule[1], rule[2])

            -- If the rule doen't mention the call, skip it
            if rule[2] ~= sys.body then
               log:trace("      not relevant")
               goto next_rule
            end

            -- If the call is the target of the rule
            -- and its dependency is not met, skip it
            if not called[rule[1]] then
               log:trace("      not satisfied")
               goto next_call
            end

            log:trace("      pass")

            ::next_rule::
         end

         log:trace("  pass")

         printf("%s", sys.name)

         -- If all rules pass, call the function
         table.insert(self.schedule, sys)
         called[sys.body] = true
         count = count + 1
         goto next_iter

         ::next_call::
      end

      assert(nil, string.format("%s: Unsolvable dependency graph", self.name))

      ::next_iter::
   end

   return self
end

---@param tbl table<any, any>
---@param paths number|table<any, boolean|table>
---@return table<any, any>
function slice(tbl, paths)
   log:trace("slice(%s, %s)", tbl, paths)

   -- Special case: Retrieve entire state with an I_READ
   if paths == I_READ then
      return tbl
   end

   if type(tbl) ~= "table" then
      assert(nil, string.format("Invalid table: %s", tbl))
   end

   if type(paths) ~= "table" then
      assert(nil, string.format("Invalid paths: %s", paths))
   end

   ---@cast paths table
   return fold_table(
      paths,
      {},
      function(acc, k, v)
         if acc == nil then
            -- Short-circuit if the accumulator is nil
            return nil
         end

         local entry = tbl[k]

         if entry == nil and (v == I_EXIST or v == I_READ) then
            -- Don't run unless the value exists
            return nil
         end

         if entry ~= nil and v == I_NOT_EXIST then
            -- Don't run unless the value does not exist
            return nil
         end

         if v == I_EXIST or v == I_NOT_EXIST then
            -- Return the state unmodified
            return acc
         elseif v == I_READ or v == I_READ_MAYBE then
            -- Read the value
            acc[k] = entry
         elseif type(v) == "table" then
            -- If there is nothing to slice, fail
            if not entry then
               return nil
            end

            -- Recursively slice the encountered value
            local sub = slice(entry, v)

            -- If the slice failed, propagate the failure upward
            if sub == nil then
               return nil
            end

            -- Otherwise, emplace the sub-slice
            acc[k] = sub
         else
            -- Anything else is invalid
            assert(nil, string.format("Invalid path type: %s", v))
         end

         return acc
      end
   )
end

---@param tbl table<any, any>
---@param vals table<any, any>
---@return table<any, any>
function merge(tbl, vals, paths)
   log:trace("merge(%s, %s, %s)", tbl, vals, paths)

   return fold_table(
      paths,
      tbl,
      function(acc, k, path)
         local v = vals[k]

         log:trace("  path: %s", path)
         log:trace("  v: %s", v)

         if path == nil then
            -- If there is no path, do nothing
            return acc
         end

         if (path == O_WRITE_MAYBE or type(path) == "table") and v == nil then
            -- If this is an optional write and there is no value, early-out
            return acc
         end

         -- Ensure the destination exists
         if not acc then
            acc = {}
         end

         -- If the path is composite
         if type(path) == "table" then
            -- Ensure the value is a table
            if v == nil then
               assert(
                  nil,
                  string.format("Expected a table for key %s", k)
               )
            end

            acc[k] = merge(acc[k], v, path)
         else
            -- If the path represents a write, emplace
            acc[k] = v
         end

         return acc
      end
   )
end

--- Run the schedule with the given parameter and return its result
---@param p any
---@return any
function Schedule:run(p)
   log("Schedule:run(%s)", p)

   if not self.schedule then
      self:build()
   end

   return fold_list(
      self.schedule,
      p,
      function(acc, sys)
         log("%s", sys.name)

         local prec = sys.precondition(acc)
         log:trace("  precondition: %s", prec)

         if not prec then
            -- If the precondition fails, don't run
            return acc
         end

         local input = slice(acc, sys.inputs)
         log:trace("  input: %s", input)
         if input == nil then
            -- If the slice failed, don't invoke the function
            return acc
         end

         log("  running...")
         local output = sys.body(input)
         log("  output: %s", output)

         -- If the function returned nothing, behave as if an empty table
         if output == nil then
            output = {}
         end

         -- If the slice succeeded,
         -- invoke the function and merge its results with the state
         return merge(acc, output, sys.outputs)
      end
   )
end

--- Run the schedule with the given error handler and parameter,
--- and return its result
---@param e fun(err: string, stack: string): any
---@param p any
---@return any
function Schedule:prun(e, p)
   log:trace("Schedule:prun(%s, %s)", e, p)
   local status, res = pcall(self.run, self, p)
   if not status then
      local stack = callstack(false, true)
      ---@cast stack string
      return e(res, stack)
   end
   return res
end

--- Produce a function to run the schedule,
--- optionally overriding its input
---@param pf fun(): any
---@return fun(pb: any): any
function Schedule:run_deferred(pf)
   return function(pb)
      return self:run(pf and pf() or pb)
   end
end

--- Produce a function to prun the schedule,
--- optionally overriding its input
---@param e fun(any: any): any
---@return fun(pb: any): any
function Schedule:prun_deferred(e, pf)
   return function(p)
      return self:prun(e, pf and pf() or p)
   end
end

ACTOR_ON_UPDATE = schedule("Actor Update")
ACTOR_ON_FIRST_UPDATE = schedule("Actor First Update")
ACTOR_ON_WEAPON_FIRED = schedule("Actor Weapon Fired")
ON_KEY_PRESS = schedule("Key Press")
ON_BEFORE_MOUSE_MOVE = schedule("Before Mouse Move")
LEVEL_CALL = schedule("Level Call")

--- Error handler
---@param e string
---@return nil
function handle_error(e, stack)
   local msg = string.format("ERROR: %s\n%s", e, stack)
   printf(msg)
   actor_menu.set_msg(1, msg, 10000)
end

state = _cl_schedule.state

--- Entrypoint
---@return nil
on_game_start = protected(
   handle_error,
   function()
      RegisterScriptCallback(
         "actor_on_update",
         function()
            ACTOR_ON_UPDATE:prun(handle_error, state)
         end
      )

      RegisterScriptCallback(
         "actor_on_first_update",
         function()
            ACTOR_ON_FIRST_UPDATE:prun(handle_error, state)
         end
      )

      RegisterScriptCallback(
         "actor_on_weapon_fired",
         function()
            ACTOR_ON_WEAPON_FIRED:prun(handle_error, state)
         end
      )

      RegisterScriptCallback(
         "on_key_press",
         function(key)
            state.keyboard = {
               key = key
            }
            ON_KEY_PRESS:prun(handle_error, state)
            state.keyboard = nil
         end
      )

      RegisterScriptCallback(
         "on_before_mouse_move",
         function(x, y, disabled, flags)
            state.mouse = {
               x = x,
               y = y,
               disabled = disabled,
               override = flags.ret_value,
            }
            ON_BEFORE_MOUSE_MOVE:prun(handle_error, state)
            flags.ret_value = state.mouse.override
            state.mouse = nil
         end
      )

      AddUniqueCall(
         function()
            LEVEL_CALL:prun(handle_error, state)
         end
      )
   end
)
