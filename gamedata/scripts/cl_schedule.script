----------------------------------------------------------------------------
-- Common Lander: Schedule
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

cl_import(this, {
   cl_function = {
      "id",
      "eq",
      "compose",
   },
   cl_list = {
      "list_to_string",
      "foldl",
      "foldl_and",
      "foldr",
      "index_of",
      "count",
      "unique",
      {map = "map_list"},
      {concat = "concat_list"},
   },
   cl_table = {"table_to_string"},
   cl_string = {"indent"},
   cl_none = {"None"},
   cl_named = {"Named"},
   cl_system = {
      "System",
      "is_system"
   },
   cl_error = {"handle_error"},
   cl_types = {"is_callable",},
   cl_executor = {
      "Serial",
      "Parallel",
      "is_serial",
   }
})

--- Schedule index
Schedule = {}

--- Schedule metatable
ScheduleMeta = { __index = Schedule }

function Schedule.new(name)
   local start = System.new("start")
   local finish = System.new("finish")
   local sched = Named.with(
      name,
      setmetatable(
         {
            _ser = Serial.new(),
            start = start,
            finish = finish,
         },
         ScheduleMeta
      )
   )
   sched:concat(start .. finish)
   return sched
end

function is_schedule(t)
   return getmetatable(t) == ScheduleMeta
end

function Schedule:concat(a)
   --[[
   printf(
      "Schedule.concat:\nLHS: %s\nRHS: %s",
      self, a
   )
   --]]

   if is_system(a) then
      a = Serial.new(a)
   elseif not is_serial(a) then
      assert(
         nil,
         string.format("Value is not a Serial: %s", a)
      )
   end

   -- If this is an empty schedule, emplace the values directly
   if self._ser:len() == 0 then
      for i=1,a:len() do
         local itm = a[i]
         local par = Parallel.new(itm)
         self._ser:push_back(par)
      end

      --printf("Out: %s", self)

      return self
   end

   -- Find indices of pre-existing entries to use as anchor points
   local inds = {}
   for i=1,a:len() do
      local itm = a[i]
      inds[i] = -1
      for j=1,self._ser:len() do
         local par = self._ser[j]
         local ind = index_of(
            par:unwrap(),
            function(cand)
               return cand == itm
            end
         )
         if ind then
            inds[i] = j
         end
      end
   end

   --printf("inds: %s", list_to_string(inds))

   -- Error out if there are no points of reference
   local anchored = count(
      inds,
      eq(-1)
   ) < #inds
   if not anchored then
      assert(
         nil,
         string.format(
            "No common members in concatenation:\nSrc: %s\nDst: %s",
            a,
            self
         )
      )
   end

   -- Error out if the source and destination disagree on ordering
   local sorted = foldl_and(
      inds,
      function(a, b)
         if a == -1 or b == -1 then
            return true
         end
      return a < b
   end)

   if not sorted then
      assert(
         nil,
         string.format(
            "Concatenation operands disagree on ordering:\nSrc: %s\nDst: %s",
            a,
            self
         )
      )
   end

   -- If duplicate indices exist, split them into separate parallels
   --printf("splitting")
   local prev = nil
   local acc = 0
   for i=1,#inds do
      local ind = inds[i]
      --[[
      printf("prev: %s", prev)
      printf("ind: %s", ind)
      printf("entry: %s", a[i])
      --]]

      if ind == -1 then
         goto next_ind
      end

      if not prev then
         prev = ind
      elseif ind == prev then
         --printf("list: %s", self._ser[ind])
         local target = index_of(
            self._ser[ind],
            function(cand)
               return cand == a[i]
            end
         )
         --printf("target: %s", target)
         local res = self._ser[ind]:remove(target)
         self._ser:insert(ind + 1, Parallel.new(res))
         acc = acc + 1
      end

      inds[i] = inds[i] + acc

      ::next_ind::
   end

   --printf("inds split: %s", table_to_string(inds))
   --printf("split: %s", self)

   --printf("allocating")
   local last = 0
   local gap = 0
   local ofs = 0
   for i=1,#inds do
      local ind = inds[i]
      if ind == -1 then
         gap = gap + 1
      else
         local delta = ind - last
         --printf("gap: %s, delta: %s", gap, delta)
         while gap > delta - 1 do
            self._ser:insert(ind, Parallel.new())
            gap = gap - 1
            ofs = ofs + 1
         end
         last = ind
         inds[i] = inds[i] + ofs
      end


      ::next_ind::
   end

   --[[
   printf("inds allocated: %s", table_to_string(inds))
   printf("allocated: %s", self)
   --]]

   -- Insert
   --printf("inserting")
   local foo = 1
   local base = nil
   local rem = foldl(
      inds,
      {},
      function(acc, next)
         --[[
         printf("acc: %s", acc)
         printf("next: %s", next)
         --]]
         if next == -1 then
            --printf("unindexed, accumulating")
            table.insert(acc, a[foo])
         else
            base = next
            for i=1,#acc do
               --[[
               printf("base index %s", base)
               printf("index %s", i)
               --]]
               local target = base - i
               --printf("target %s", i)
               local itm = table.remove(acc)
               --[[
               printf("inserting %s", itm)
               printf(
                  "to parallel %s",
                  list_to_string(self._ser[target])
               )
               --]]
               self._ser[target]:push_back(
                  itm
               )
            end
         end
         foo = foo + 1
         return acc
      end
   )

   --print("rem:", unpack(rem))

   for i=1,#rem do
      if not self._ser[base + i] then
         --print("allocating new parallel at", base + 1)
         self._ser:push_back(Parallel.new())
      end
      --print("inserting to parallel", base + i)
      self._ser[base + i]:push_back(
         table.remove(rem, 1)
      )
   end


   --printf("Out: %s", self)

   return self
end

function ScheduleMeta.__concat(a, b)
   return a:concat(b)
end

function ScheduleMeta:__tostring()
   local out = "Schedule["
   out = out .. indent("\n" .. tostring(self._ser))
   out = out .. "\n]"
   return out
end

function ScheduleMeta:__call(...)
   return self._ser(...)
end

on_level_call = Schedule.new("on_level_call")
actor_on_update = Schedule.new("actor_on_update")
actor_on_first_update = Schedule.new("actor_on_first_update")
actor_on_weapon_fired = Schedule.new("actor_on_weapon_fired")
on_key_press = Schedule.new("on_key_press")
on_before_mouse_move = Schedule.new("on_before_mouse_move")
on_before_key_press = Schedule.new("on_before_key_press")
on_before_key_release = Schedule.new("on_before_key_release")
on_before_key_hold = Schedule.new("on_before_key_hold")
gui_on_show = Schedule.new("gui_on_show")
gui_on_hide = Schedule.new("gui_on_hide")

state = {}

do_on_level_call = function()
   local res, out = pcall(on_level_call, state)
   if not res then
      RemoveUniqueCall(do_on_level_call)
      handle_error(out, callstack(false, true))
   end
end

do_actor_on_update = function()
   local res, out = pcall(actor_on_update, state)
   if not res then
      UnregisterScriptCallback("actor_on_update", do_actor_on_update)
      handle_error(out, callstack(false, true))
   end
end

do_actor_on_first_update = function()
   local res, out = pcall(actor_on_first_update, state)
   if not res then
      UnregisterScriptCallback(
         "actor_on_first_update",
         do_actor_on_first_update
      )
      handle_error(out, callstack(false, true))
   end
end

do_actor_on_weapon_fired = function()
   local res, out = pcall(actor_on_weapon_fired, state)
   if not res then
      UnregisterScriptCallback(
         "actor_on_weapon_fired",
         do_actor_on_weapon_fired
      )
      handle_error(out, callstack(false, true))
   end
end

do_on_before_mouse_move = function(x, y, disabled, flags)
   state.mouse = {
      x = x,
      y = y,
      disabled = disabled,
      override = false,
   }
   local res, out = pcall(on_before_mouse_move, state)
   if not res then
      UnregisterScriptCallback(
         "on_before_mouse_move",
         do_on_before_mouse_move
      )
      handle_error(out, callstack(false, true))
   end
   --flags.ret_value = state.mouse.override
   state.mouse = nil
end

do_on_before_key_press = function(key, mod, disabled, flags)
   --[[
   printf(
      "on_before_key_press: %s, %s, %s, %s",
      a, b, c, table_to_string(d)
   )
   --]]
end

do_on_before_key_release = function(key, mod, disabled, flags)
   --[[
   printf(
      "on_before_key_release: %s, %s, %s, %s",
      key, mod, disabled, table_to_string(flags)
   )
   --]]
end

do_on_before_key_hold = function(key, mod, disabled, flags)
   --[[
   printf(
      "on_before_key_hold: %s, %s, %s, %s",
      key, mod, disabled, table_to_string(flags)
   )
   --]]
end

do_on_key_press = function(key)
   state.keyboard = {
      key = key
   }
   local res, out = pcall(on_key_press, state)
   if not res then
      UnregisterScriptCallback(
         "on_key_press",
         do_on_key_press
      )
      handle_error(out, callstack(false, true))
   end
   state.keyboard = nil
end

do_gui_on_show = function(name, id)
   printf("GUI_on_show: %s, %s", name, id)
   state.gui = {
      name = name,
      id = id,
   }
   local res,out = pcall(gui_on_show, state)
   if not res then
      UnregisterScriptCallback(
         "gui_on_show",
         do_gui_on_show
      )
      handle_error(out, callstack(false, true))
   end
end

do_gui_on_hide = function(name, id)
   printf("GUI_on_hide: %s, %s", name, id)
   local res,out = pcall(gui_on_hide, state)
   if not res then
      UnregisterScriptCallback(
         "gui_on_hide",
         do_gui_on_hide
      )
      handle_error(out, callstack(false, true))
   end
   state.gui = nil
end

do_actor_menu_on_mode_changed = function(a, b)
   printf("actor_menu_on_mode_changed: %s, %s", a, b)
end

function on_game_start()
   printf("schedule_new on_game_start")

   printf("%s", on_level_call)
   printf("%s", actor_on_update)
   printf("%s", actor_on_first_update)
   printf("%s", actor_on_weapon_fired)
   printf("%s", on_before_mouse_move)
   printf("%s", on_before_key_press)
   printf("%s", on_before_key_release)
   printf("%s", on_before_key_hold)
   printf("%s", on_key_press)

   AddUniqueCall(do_on_level_call)
   RegisterScriptCallback("actor_on_update", do_actor_on_update)
   RegisterScriptCallback("actor_on_first_update", do_actor_on_first_update)
   RegisterScriptCallback("actor_on_weapon_fired", do_actor_on_weapon_fired)

   RegisterScriptCallback("on_key_press", do_on_key_press)

   RegisterScriptCallback("on_before_key_press", do_on_before_key_press)
   RegisterScriptCallback("on_before_key_release", do_on_before_key_release)
   RegisterScriptCallback("on_before_key_hold", do_on_before_key_hold)
   RegisterScriptCallback("on_before_mouse_move", do_on_before_mouse_move)

   RegisterScriptCallback("GUI_on_show", do_gui_on_show)
   RegisterScriptCallback("GUI_on_hide", do_gui_on_hide)

   RegisterScriptCallback(
      "ActorMenu_on_mode_changed",
      do_actor_menu_on_mode_changed
   )
end
