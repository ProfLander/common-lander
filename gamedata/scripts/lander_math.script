----------------------------------------------------------------------------
-- Math Utilities
----------------------------------------------------------------------------
-- Implemented by Lhan
----------------------------------------------------------------------------

-- Imports

-- Constants

PI = 3.14159
TAU = PI * 2
RAD2DEG = 180 / PI
DEG2RAD = PI / 180

POS_X = vector():set(1, 0, 0)
POS_Y = vector():set(0, 1, 0)
POS_Z = vector():set(0, 0, 1)

NEG_X = vector():set(-1, 0, 0)
NEG_Y = vector():set(0, -1, 0)
NEG_Z = vector():set(0, 0, -1)

EPSILON = 0.00000001

-- Implementation

---@param n number
---@return number
function sign(n)
   if n > 0 then
      return 1
   elseif n < 0 then
      return -1
   else
      return 0
   end
end

---@param f number
---@return number
function deg(f)
   return f * RAD2DEG
end

---@param f number
---@return number
function rad(f)
   return f * DEG2RAD
end

---@param v vector
---@param k vector
---@param theta number
---@return vector
function vector_rotate(v, k, theta)
   if theta == 0
   or theta == 1/0
   or theta == 0/0
   or theta == -0/0
   or theta == -1/0
   then
      return v
   end

   local cos_theta = math.cos(theta)
   local sin_theta = math.sin(theta)

   return vector()
      :set(v)
      :mul(cos_theta)
      :add(vector_cross(k, v):mul(sin_theta))
      :add(vector():set(k):mul(k:dotproduct(v)))
      :mul(1 - cos_theta)
end

---@param v vector
---@param theta number
---@return vector
function vector_rotate_x(v, theta)
   return vector_rotate(v, vector():set(1, 0, 0), theta)
end

---@param v vector
---@param theta number
---@return vector
function vector_rotate_y(v, theta)
   return vector_rotate(v, vector():set(0, 1, 0), theta)
end

---@param v vector
---@param theta number
---@return vector
function vector_rotate_z(v, theta)
   return vector_rotate(v, vector():set(0, 0, 1), theta)
end

---@param v vector
---@return vector
function vector_xz(v)
   return vector():set(v.x, 0, v.z)
end

--- Basis metatable
---@class basis
---@field x vector
---@field y vector
---@field z vector
local Basis = {}

--- Basis Constructor
---@param x? vector
---@param y? vector
---@param z? vector
---@return basis
function basis(x, y, z)
   return setmetatable(
      {
         x = x or vector():set(POS_X),
         y = y or vector():set(POS_Y),
         z = z or vector():set(POS_Z),
      },
      {
         __index = Basis
      }
   )
end

---@return basis
function Basis:normalize()
   return basis(
      self.x:normalize(),
      self.y:normalize(),
      self.z:normalize()
   )
end

---@param k vector
---@param theta number
---@return basis
function Basis:rotate(k, theta)
   if theta == 0/0 then
      return self
   end

   if theta == 1/0 then
      return self
   end

   if math.abs(theta) < EPSILON then
      return self
   end

   return basis(
      vector_rotate(self.x, k, theta),
      vector_rotate(self.y, k, theta),
      vector_rotate(self.z, k, theta)
   ):normalize()
end

---@param theta number
---@return basis
function Basis:rotate_x(theta)
   return self:rotate(POS_X, theta)
end

---@param theta number
---@return basis
function Basis:rotate_y(theta)
   return self:rotate(POS_Y, theta)
end

---@param theta number
---@return basis
function Basis:rotate_z(theta)
   return self:rotate(POS_Z, theta)
end

---@param hpb vector
---@return basis
function Basis:rotate_hpb(hpb)
   local out = basis(
      vector():set(self.x),
      vector():set(self.y),
      vector():set(self.z)
   )
   out = out:rotate(out.y, -hpb.x)
   out = out:rotate(out.x, -hpb.y)
   out = out:rotate(out.z, -hpb.z)
   return out
end

--- Transform the given vector into basis-space
---@param basis basis
---@param vec vector
---@return vector
function world_to_basis(basis, vec)
   return vector():set(
      vec:dotproduct(basis.x),
      vec:dotproduct(basis.y),
      vec:dotproduct(basis.z)
   )
end

--- Fetch the camera's basis
function camera_basis()
   local dev = device()
   return basis(
      dev.cam_right,
      dev.cam_top,
      dev.cam_dir
   )
end

--- Convert a Heading-Pitch-Bank rotation
--- (such as those returned from bone_direction)
--- into a direction vector
---@param hpb vector
---@return vector
function hpb_to_direction(hpb)
   return basis():rotate_hpb(hpb).z
end

--- Return the rotation between the given vectors in axis-angle form
---@param va vector
---@param vb vector
---@return vector?, number?
function vector_axis_angle(va, vb)
   local axis = vector_cross(va, vb)
   printf("  axis: %s", axis)

   local mag = axis:magnitude()
   printf("  mag: %s", mag)

   if mag ~= mag
   then
      printf("Invalid magnitude")
      return nil
   end

   local angle = math.asin(mag)
   printf("  angle: %s", angle)

   if angle ~= angle
   then
      printf("Invalid angle")
      return nil
   end

   axis:normalize()

   return axis, angle
end

--- Convert from an axis-angle representation to euler angles
---@param axis vector
---@param angle number
---@return vector
function axis_angle_to_euler(axis, angle)
   local s = math.sin(angle)
   local c = math.cos(angle)
   local t = 1 - c;

   if (axis.x * axis.y * t + axis.z * s) > 1.0 - EPSILON then
      return vector():set(
         2 * math.atan2(axis.x * math.sin(angle/2), math.cos(angle/2)),
         PI / 2,
         0
      )
   end

   if (axis.x * axis.y * t + axis.z * s) < -(1.0 - EPSILON) then
      return vector:set(
         -2 * math.atan2(axis.x * math.sin(angle / 2), math.cos(angle/2)),
         -PI / 2,
         0
      )
   end

   return vector():set(
      math.atan2(axis.y * s - axis.x * axis.z * t, 1 - (axis.y * axis.y + axis.z * axis.z) * t),
      math.atan2(axis.x * s - axis.y * axis.z * t, 1 - (axis.x * axis.x + axis.z * axis.z) * t),
      math.asin(axis.x * axis.y * t + axis.z * s)
   )
end

--- Interpolate between two vectors
---@param a vector
---@param b vector
---@param t number
function vector_lerp(a, b, t)
   local delta = vector():set(b):sub(a)
   return vector():set(a:add(delta:mul(t)))
end
